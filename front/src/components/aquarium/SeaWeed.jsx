/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 .\\public\\SeaWeed.glb
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { Vector3 } from "three";
import { useFrame } from "@react-three/fiber";

let meshes = [];
let originalPositions = {};

export function SeaWeed(props) {
  const { nodes, materials } = useGLTF("/SeaWeed.glb");

  Object.keys(materials).forEach((mKey) => (materials[mKey].side = THREE.DoubleSide));

  const animateSwim = (geo, index, elapsedTime) => {
    if (!originalPositions[index]) return;

    const positionArray = originalPositions[index];

    for (let i = 0; i < positionArray.length; i += 3) {
      const xPos = positionArray[i];
      const yPos = positionArray[i + 1];
      const zPos = positionArray[i + 2];

      let pos = new Vector3(xPos, yPos, zPos);
      pos.x = xPos + (Math.sin(elapsedTime / 2) * Math.cos(yPos * 10)) / 20;
      pos.z = zPos + (Math.sin(elapsedTime) * Math.cos(yPos * 2)) / 20;
      geo.attributes.position.array[i] = pos.x;
      geo.attributes.position.array[i + 1] = pos.y;
      geo.attributes.position.array[i + 2] = pos.z;
    }

    geo.attributes.position.needsUpdate = true;

    return geo;
  };

  if (!meshes || meshes.length === 0) {
    meshes = Object.keys(nodes)
      .filter((nodeKey) => nodes[nodeKey].type === "Mesh")
      .map((nodeKey, index) => {
        let geo = nodes[nodeKey].geometry;

        originalPositions[index] = [];

        for (let i = 0; i < geo.attributes.position.array.length; i += 3) {
          const xPos = geo.attributes.position.array[i];
          const yPos = geo.attributes.position.array[i + 1];
          const zPos = geo.attributes.position.array[i + 2];

          originalPositions[index][i] = xPos;
          originalPositions[index][i + 1] = yPos;
          originalPositions[index][i + 2] = zPos;
        }

        return geo;
      });
  }

  useFrame(({ clock }) => {
    const elapsedTime = clock.getElapsedTime();

    meshes = meshes.map((geo, index) => animateSwim(geo, index, elapsedTime));
  });

  return (
    <group {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={meshes[0]} material={materials["Material.006"]} />
    </group>
  );
}

useGLTF.preload("/SeaWeed.glb");
