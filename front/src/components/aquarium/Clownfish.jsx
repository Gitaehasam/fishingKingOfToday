/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 clownfish.glb 
Author: JayNme (https://sketchfab.com/JayNmeGaming)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/oxidane-clownfish-1732838d86b24b6a841807a6b8703565
Title: Oxidane - Clownfish
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { Vector3 } from "three";

let mesh;
const originalPositions = [];

export function Clownfish(props) {
  const { nodes, materials } = useGLTF("/clownfish.glb");
  console.log(nodes);
  console.log(materials);

  const animateSwim = (geo, elapsedTime) => {
    if (!originalPositions.length) return;

    const positionArray = originalPositions;

    for (let i = 0; i < positionArray.length; i += 3) {
      const xPos = positionArray[i];
      const yPos = positionArray[i + 1];
      const zPos = positionArray[i + 2];

      let pos = new Vector3(xPos, yPos, zPos);
      pos.x = xPos + Math.sin(elapsedTime * 6 + Math.sin(zPos) * 5) / 20;
      geo.attributes.position.array[i] = pos.x;
      geo.attributes.position.array[i + 1] = pos.y;
      geo.attributes.position.array[i + 2] = pos.z;
    }

    geo.attributes.position.needsUpdate = true;

    return geo;
  };

  if (!mesh) {
    mesh = nodes["Cube003_Material_0"].geometry; // Replace "YourMeshName" with the actual name of your mesh

    originalPositions.length = 0;

    for (let i = 0; i < mesh.attributes.position.array.length; i += 3) {
      const xPos = mesh.attributes.position.array[i];
      const yPos = mesh.attributes.position.array[i + 1];
      const zPos = mesh.attributes.position.array[i + 2];

      originalPositions[i] = xPos;
      originalPositions[i + 1] = yPos;
      originalPositions[i + 2] = zPos;
    }
  }

  useFrame(({ clock }) => {
    const elapsedTime = clock.getElapsedTime();

    mesh = animateSwim(mesh, elapsedTime);
  });

  return (
    <group {...props} dispose={null}>
      <instancedMesh
        geometry={mesh}
        material={materials.Material}
        args={[null, null, 1]}
        scale={0.3}
      />
    </group>
  );
}

useGLTF.preload("/clownfish.glb");
